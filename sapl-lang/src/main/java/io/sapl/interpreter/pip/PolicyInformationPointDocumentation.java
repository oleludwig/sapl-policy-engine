// Generated by delombok at Tue Jan 02 01:24:37 CET 2024
/*
 * Copyright (C) 2017-2023 Dominic Heutelbeck (dominic@heutelbeck.com)
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sapl.interpreter.pip;

import java.util.HashMap;
import java.util.Map;

public class PolicyInformationPointDocumentation {

    String name;

    String              description;
    Map<String, String> documentation = new HashMap<>();

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public String getName() {
        return this.name;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public String getDescription() {
        return this.description;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public Map<String, String> getDocumentation() {
        return this.documentation;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public void setName(final String name) {
        java.util.Objects.requireNonNull(name, "name is marked non-null but is null");
        this.name = name;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public void setDescription(final String description) {
        java.util.Objects.requireNonNull(description, "description is marked non-null but is null");
        this.description = description;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public void setDocumentation(final Map<String, String> documentation) {
        this.documentation = documentation;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this)
            return true;
        if (!(o instanceof PolicyInformationPointDocumentation))
            return false;
        final PolicyInformationPointDocumentation other = (PolicyInformationPointDocumentation) o;
        if (!other.canEqual((java.lang.Object) this))
            return false;
        final java.lang.Object this$name  = this.getName();
        final java.lang.Object other$name = other.getName();
        if (this$name == null ? other$name != null : !this$name.equals(other$name))
            return false;
        final java.lang.Object this$description  = this.getDescription();
        final java.lang.Object other$description = other.getDescription();
        if (this$description == null ? other$description != null : !this$description.equals(other$description))
            return false;
        final java.lang.Object this$documentation  = this.getDocumentation();
        final java.lang.Object other$documentation = other.getDocumentation();
        if (this$documentation == null ? other$documentation != null : !this$documentation.equals(other$documentation))
            return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof PolicyInformationPointDocumentation;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public int hashCode() {
        final int              PRIME  = 59;
        int                    result = 1;
        final java.lang.Object $name  = this.getName();
        result = result * PRIME + ($name == null ? 43 : $name.hashCode());
        final java.lang.Object $description = this.getDescription();
        result = result * PRIME + ($description == null ? 43 : $description.hashCode());
        final java.lang.Object $documentation = this.getDocumentation();
        result = result * PRIME + ($documentation == null ? 43 : $documentation.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public java.lang.String toString() {
        return "PolicyInformationPointDocumentation(name=" + this.getName() + ", description=" + this.getDescription()
                + ", documentation=" + this.getDocumentation() + ")";
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public PolicyInformationPointDocumentation() {
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public PolicyInformationPointDocumentation(final String name, final String description) {
        java.util.Objects.requireNonNull(name, "name is marked non-null but is null");
        java.util.Objects.requireNonNull(description, "description is marked non-null but is null");
        this.name        = name;
        this.description = description;
    }
}
