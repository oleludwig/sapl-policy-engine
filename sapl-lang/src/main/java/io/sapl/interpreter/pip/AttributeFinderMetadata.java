// Generated by delombok at Tue Jan 02 01:24:37 CET 2024
/*
 * Copyright (C) 2017-2023 Dominic Heutelbeck (dominic@heutelbeck.com)
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sapl.interpreter.pip;

import java.lang.reflect.Method;

/**
 * Metadata for attribute finders.
 */
public class AttributeFinderMetadata implements LibraryEntryMetadata {
    Object  policyInformationPoint;
    Method  function;
    String  libraryName;
    String  functionName;
    String  functionSchema;
    String  functionPathToSchema;
    boolean environmentAttribute;
    boolean attributeWithVariableParameter;
    boolean varArgsParameters;
    int     numberOfParameters;

    @Override
    public String getDocumentationCodeTemplate() {
        var sb                             = new StringBuilder();
        var indexOfParameterBeingDescribed = 0;
        if (!isEnvironmentAttribute())
            sb.append(describeParameterForDocumentation(indexOfParameterBeingDescribed++)).append('.');
        if (isAttributeWithVariableParameter())
            indexOfParameterBeingDescribed++;
        sb.append('<').append(fullyQualifiedName());
        appendParameterList(sb, indexOfParameterBeingDescribed, this::describeParameterForDocumentation);
        sb.append('>');
        return sb.toString();
    }

    @Override
    public String getFunctionSchema() {
        return functionSchema;
    }

    @Override
    public String getCodeTemplate() {
        var sb                             = new StringBuilder();
        var indexOfParameterBeingDescribed = 0;
        if (!isEnvironmentAttribute())
            indexOfParameterBeingDescribed++;
        if (isAttributeWithVariableParameter())
            indexOfParameterBeingDescribed++;
        sb.append(fullyQualifiedName());
        appendParameterList(sb, indexOfParameterBeingDescribed, this::getParameterName);
        sb.append('>');
        return sb.toString();
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public Object getPolicyInformationPoint() {
        return this.policyInformationPoint;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public Method getFunction() {
        return this.function;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public String getLibraryName() {
        return this.libraryName;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public String getFunctionName() {
        return this.functionName;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public String getFunctionPathToSchema() {
        return this.functionPathToSchema;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public boolean isEnvironmentAttribute() {
        return this.environmentAttribute;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public boolean isAttributeWithVariableParameter() {
        return this.attributeWithVariableParameter;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public boolean isVarArgsParameters() {
        return this.varArgsParameters;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public int getNumberOfParameters() {
        return this.numberOfParameters;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public void setPolicyInformationPoint(final Object policyInformationPoint) {
        this.policyInformationPoint = policyInformationPoint;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public void setFunction(final Method function) {
        this.function = function;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public void setLibraryName(final String libraryName) {
        this.libraryName = libraryName;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public void setFunctionName(final String functionName) {
        this.functionName = functionName;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public void setFunctionSchema(final String functionSchema) {
        this.functionSchema = functionSchema;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public void setFunctionPathToSchema(final String functionPathToSchema) {
        this.functionPathToSchema = functionPathToSchema;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public void setEnvironmentAttribute(final boolean environmentAttribute) {
        this.environmentAttribute = environmentAttribute;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public void setAttributeWithVariableParameter(final boolean attributeWithVariableParameter) {
        this.attributeWithVariableParameter = attributeWithVariableParameter;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public void setVarArgsParameters(final boolean varArgsParameters) {
        this.varArgsParameters = varArgsParameters;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public void setNumberOfParameters(final int numberOfParameters) {
        this.numberOfParameters = numberOfParameters;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this)
            return true;
        if (!(o instanceof AttributeFinderMetadata))
            return false;
        final AttributeFinderMetadata other = (AttributeFinderMetadata) o;
        if (!other.canEqual((java.lang.Object) this))
            return false;
        if (this.isEnvironmentAttribute() != other.isEnvironmentAttribute())
            return false;
        if (this.isAttributeWithVariableParameter() != other.isAttributeWithVariableParameter())
            return false;
        if (this.isVarArgsParameters() != other.isVarArgsParameters())
            return false;
        if (this.getNumberOfParameters() != other.getNumberOfParameters())
            return false;
        final java.lang.Object this$policyInformationPoint  = this.getPolicyInformationPoint();
        final java.lang.Object other$policyInformationPoint = other.getPolicyInformationPoint();
        if (this$policyInformationPoint == null ? other$policyInformationPoint != null
                : !this$policyInformationPoint.equals(other$policyInformationPoint))
            return false;
        final java.lang.Object this$function  = this.getFunction();
        final java.lang.Object other$function = other.getFunction();
        if (this$function == null ? other$function != null : !this$function.equals(other$function))
            return false;
        final java.lang.Object this$libraryName  = this.getLibraryName();
        final java.lang.Object other$libraryName = other.getLibraryName();
        if (this$libraryName == null ? other$libraryName != null : !this$libraryName.equals(other$libraryName))
            return false;
        final java.lang.Object this$functionName  = this.getFunctionName();
        final java.lang.Object other$functionName = other.getFunctionName();
        if (this$functionName == null ? other$functionName != null : !this$functionName.equals(other$functionName))
            return false;
        final java.lang.Object this$functionSchema  = this.getFunctionSchema();
        final java.lang.Object other$functionSchema = other.getFunctionSchema();
        if (this$functionSchema == null ? other$functionSchema != null
                : !this$functionSchema.equals(other$functionSchema))
            return false;
        final java.lang.Object this$functionPathToSchema  = this.getFunctionPathToSchema();
        final java.lang.Object other$functionPathToSchema = other.getFunctionPathToSchema();
        if (this$functionPathToSchema == null ? other$functionPathToSchema != null
                : !this$functionPathToSchema.equals(other$functionPathToSchema))
            return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof AttributeFinderMetadata;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public int hashCode() {
        final int PRIME  = 59;
        int       result = 1;
        result = result * PRIME + (this.isEnvironmentAttribute() ? 79 : 97);
        result = result * PRIME + (this.isAttributeWithVariableParameter() ? 79 : 97);
        result = result * PRIME + (this.isVarArgsParameters() ? 79 : 97);
        result = result * PRIME + this.getNumberOfParameters();
        final java.lang.Object $policyInformationPoint = this.getPolicyInformationPoint();
        result = result * PRIME + ($policyInformationPoint == null ? 43 : $policyInformationPoint.hashCode());
        final java.lang.Object $function = this.getFunction();
        result = result * PRIME + ($function == null ? 43 : $function.hashCode());
        final java.lang.Object $libraryName = this.getLibraryName();
        result = result * PRIME + ($libraryName == null ? 43 : $libraryName.hashCode());
        final java.lang.Object $functionName = this.getFunctionName();
        result = result * PRIME + ($functionName == null ? 43 : $functionName.hashCode());
        final java.lang.Object $functionSchema = this.getFunctionSchema();
        result = result * PRIME + ($functionSchema == null ? 43 : $functionSchema.hashCode());
        final java.lang.Object $functionPathToSchema = this.getFunctionPathToSchema();
        result = result * PRIME + ($functionPathToSchema == null ? 43 : $functionPathToSchema.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public java.lang.String toString() {
        return "AttributeFinderMetadata(policyInformationPoint=" + this.getPolicyInformationPoint() + ", function="
                + this.getFunction() + ", libraryName=" + this.getLibraryName() + ", functionName="
                + this.getFunctionName() + ", functionSchema=" + this.getFunctionSchema() + ", functionPathToSchema="
                + this.getFunctionPathToSchema() + ", environmentAttribute=" + this.isEnvironmentAttribute()
                + ", attributeWithVariableParameter=" + this.isAttributeWithVariableParameter() + ", varArgsParameters="
                + this.isVarArgsParameters() + ", numberOfParameters=" + this.getNumberOfParameters() + ")";
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public AttributeFinderMetadata(final Object policyInformationPoint, final Method function, final String libraryName,
            final String functionName, final String functionSchema, final String functionPathToSchema,
            final boolean environmentAttribute, final boolean attributeWithVariableParameter,
            final boolean varArgsParameters, final int numberOfParameters) {
        this.policyInformationPoint         = policyInformationPoint;
        this.function                       = function;
        this.libraryName                    = libraryName;
        this.functionName                   = functionName;
        this.functionSchema                 = functionSchema;
        this.functionPathToSchema           = functionPathToSchema;
        this.environmentAttribute           = environmentAttribute;
        this.attributeWithVariableParameter = attributeWithVariableParameter;
        this.varArgsParameters              = varArgsParameters;
        this.numberOfParameters             = numberOfParameters;
    }
}
