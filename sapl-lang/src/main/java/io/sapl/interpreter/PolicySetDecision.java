// Generated by delombok at Tue Jan 02 01:24:37 CET 2024
/*
 * Copyright (C) 2017-2023 Dominic Heutelbeck (dominic@heutelbeck.com)
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sapl.interpreter;

import java.util.Optional;
import com.fasterxml.jackson.databind.JsonNode;
import io.sapl.api.interpreter.Trace;
import io.sapl.api.interpreter.Val;
import io.sapl.api.pdp.AuthorizationDecision;

public class PolicySetDecision implements DocumentEvaluationResult {
    final CombinedDecision combinedDecision;
    final String           documentName;
    final Optional<Val>    targetResult;
    final Optional<String> errorMessage;

    private PolicySetDecision(CombinedDecision combinedDecision, String documentName, Optional<Val> matches,
            Optional<String> errorMessage) {
        this.combinedDecision = combinedDecision;
        this.documentName     = documentName;
        this.targetResult     = matches;
        this.errorMessage     = errorMessage;
    }

    public static PolicySetDecision of(CombinedDecision combinedDecision, String document) {
        return new PolicySetDecision(combinedDecision, document, Optional.empty(), Optional.empty());
    }

    public static PolicySetDecision error(String document, String errorMessage) {
        return new PolicySetDecision(null, document, Optional.empty(), Optional.ofNullable(errorMessage));
    }

    public static PolicySetDecision ofTargetError(String document, Val targetValue, String combiningAlgorithm) {
        return new PolicySetDecision(CombinedDecision.of(AuthorizationDecision.INDETERMINATE, combiningAlgorithm),
                document, Optional.ofNullable(targetValue), Optional.empty());
    }

    public static PolicySetDecision notApplicable(String document, Val targetValue, String combiningAlgorithm) {
        return new PolicySetDecision(CombinedDecision.of(AuthorizationDecision.NOT_APPLICABLE, combiningAlgorithm),
                document, Optional.ofNullable(targetValue), Optional.empty());
    }

    public static DocumentEvaluationResult ofImportError(String document, String errorMessage,
            String combiningAlgorithm) {
        return new PolicySetDecision(CombinedDecision.of(AuthorizationDecision.INDETERMINATE, combiningAlgorithm),
                document, Optional.empty(), Optional.ofNullable(errorMessage));
    }

    @Override
    public DocumentEvaluationResult withTargetResult(Val targetResult) {
        return new PolicySetDecision(combinedDecision, documentName, Optional.ofNullable(targetResult), errorMessage);
    }

    @Override
    public AuthorizationDecision getAuthorizationDecision() {
        if (errorMessage.isPresent())
            return AuthorizationDecision.INDETERMINATE;
        return combinedDecision.getAuthorizationDecision();
    }

    @Override
    public JsonNode getTrace() {
        var trace = Val.JSON.objectNode();
        trace.set(Trace.DOCUMENT_TYPE, Val.JSON.textNode("policy set"));
        trace.set(Trace.POLICY_SET_NAME, Val.JSON.textNode(documentName));
        if (combinedDecision != null)
            trace.set(Trace.COMBINED_DECISION, combinedDecision.getTrace());
        errorMessage.ifPresent(error -> trace.set(Trace.ERROR_MESSAGE, Val.JSON.textNode(errorMessage.get())));
        targetResult.ifPresent(target -> trace.set(Trace.TARGET, target.getTrace()));
        return trace;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public CombinedDecision getCombinedDecision() {
        return this.combinedDecision;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public String getDocumentName() {
        return this.documentName;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public Optional<Val> getTargetResult() {
        return this.targetResult;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public Optional<String> getErrorMessage() {
        return this.errorMessage;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public java.lang.String toString() {
        return "PolicySetDecision(combinedDecision=" + this.getCombinedDecision() + ", documentName="
                + this.getDocumentName() + ", targetResult=" + this.getTargetResult() + ", errorMessage="
                + this.getErrorMessage() + ")";
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this)
            return true;
        if (!(o instanceof PolicySetDecision))
            return false;
        final PolicySetDecision other = (PolicySetDecision) o;
        if (!other.canEqual((java.lang.Object) this))
            return false;
        final java.lang.Object this$combinedDecision  = this.getCombinedDecision();
        final java.lang.Object other$combinedDecision = other.getCombinedDecision();
        if (this$combinedDecision == null ? other$combinedDecision != null
                : !this$combinedDecision.equals(other$combinedDecision))
            return false;
        final java.lang.Object this$documentName  = this.getDocumentName();
        final java.lang.Object other$documentName = other.getDocumentName();
        if (this$documentName == null ? other$documentName != null : !this$documentName.equals(other$documentName))
            return false;
        final java.lang.Object this$targetResult  = this.getTargetResult();
        final java.lang.Object other$targetResult = other.getTargetResult();
        if (this$targetResult == null ? other$targetResult != null : !this$targetResult.equals(other$targetResult))
            return false;
        final java.lang.Object this$errorMessage  = this.getErrorMessage();
        final java.lang.Object other$errorMessage = other.getErrorMessage();
        if (this$errorMessage == null ? other$errorMessage != null : !this$errorMessage.equals(other$errorMessage))
            return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof PolicySetDecision;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public int hashCode() {
        final int              PRIME             = 59;
        int                    result            = 1;
        final java.lang.Object $combinedDecision = this.getCombinedDecision();
        result = result * PRIME + ($combinedDecision == null ? 43 : $combinedDecision.hashCode());
        final java.lang.Object $documentName = this.getDocumentName();
        result = result * PRIME + ($documentName == null ? 43 : $documentName.hashCode());
        final java.lang.Object $targetResult = this.getTargetResult();
        result = result * PRIME + ($targetResult == null ? 43 : $targetResult.hashCode());
        final java.lang.Object $errorMessage = this.getErrorMessage();
        result = result * PRIME + ($errorMessage == null ? 43 : $errorMessage.hashCode());
        return result;
    }
}
