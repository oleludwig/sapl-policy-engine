// Generated by delombok at Tue Jan 02 01:24:37 CET 2024
/*
 * Copyright (C) 2017-2023 Dominic Heutelbeck (dominic@heutelbeck.com)
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sapl.interpreter;

public final class DocumentAnalysisResult {
    private final boolean      valid;
    private final String       name;
    private final DocumentType type;
    private final String       parserError;

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public DocumentAnalysisResult(final boolean valid, final String name, final DocumentType type,
            final String parserError) {
        this.valid       = valid;
        this.name        = name;
        this.type        = type;
        this.parserError = parserError;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public boolean isValid() {
        return this.valid;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public String getName() {
        return this.name;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public DocumentType getType() {
        return this.type;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public String getParserError() {
        return this.parserError;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this)
            return true;
        if (!(o instanceof DocumentAnalysisResult))
            return false;
        final DocumentAnalysisResult other = (DocumentAnalysisResult) o;
        if (this.isValid() != other.isValid())
            return false;
        final java.lang.Object this$name  = this.getName();
        final java.lang.Object other$name = other.getName();
        if (this$name == null ? other$name != null : !this$name.equals(other$name))
            return false;
        final java.lang.Object this$type  = this.getType();
        final java.lang.Object other$type = other.getType();
        if (this$type == null ? other$type != null : !this$type.equals(other$type))
            return false;
        final java.lang.Object this$parserError  = this.getParserError();
        final java.lang.Object other$parserError = other.getParserError();
        if (this$parserError == null ? other$parserError != null : !this$parserError.equals(other$parserError))
            return false;
        return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public int hashCode() {
        final int PRIME  = 59;
        int       result = 1;
        result = result * PRIME + (this.isValid() ? 79 : 97);
        final java.lang.Object $name = this.getName();
        result = result * PRIME + ($name == null ? 43 : $name.hashCode());
        final java.lang.Object $type = this.getType();
        result = result * PRIME + ($type == null ? 43 : $type.hashCode());
        final java.lang.Object $parserError = this.getParserError();
        result = result * PRIME + ($parserError == null ? 43 : $parserError.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public java.lang.String toString() {
        return "DocumentAnalysisResult(valid=" + this.isValid() + ", name=" + this.getName() + ", type="
                + this.getType() + ", parserError=" + this.getParserError() + ")";
    }
}
