// Generated by delombok at Tue Jan 02 01:24:37 CET 2024
/*
 * Copyright (C) 2017-2023 Dominic Heutelbeck (dominic@heutelbeck.com)
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sapl.prp;

import java.util.Arrays;
import java.util.List;
import io.sapl.grammar.sapl.SAPL;

public final class PrpUpdateEvent {
    private final Update[] updates;

    public PrpUpdateEvent(List<Update> updates) {
        if (updates == null) {
            this.updates = new Update[] {};
        } else {
            this.updates = updates.toArray(Update[]::new);
        }
    }

    public PrpUpdateEvent(Update... updates) {
        this.updates = Arrays.copyOf(updates, updates.length);
    }

    public Update[] getUpdates() {
        return Arrays.copyOf(updates, updates.length);
    }

    /**
     * This contains the raw document and a custom equals method to eliminate
     * duplicate update events. E.g. file creation may lead to two subsequent
     * identical publish events without the .distinctUntilChanged() making use of
     * the {@code equals} method of this class.
     */
    public static final class Update {
        private final Type   type;
        private final SAPL   document;
        private final String rawDocument;

        @Override
        public String toString() {
            return "Update(type=" + type + ", documentName="
                    + (document != null ? "\'" + document.getPolicyElement().getSaplName() + "\'" : "NULL POLICY")
                    + ")";
        }

        @java.lang.SuppressWarnings("all")
        // @lombok.Generated
        public Update(final Type type, final SAPL document, final String rawDocument) {
            this.type        = type;
            this.document    = document;
            this.rawDocument = rawDocument;
        }

        @java.lang.SuppressWarnings("all")
        // @lombok.Generated
        public Type getType() {
            return this.type;
        }

        @java.lang.SuppressWarnings("all")
        // @lombok.Generated
        public SAPL getDocument() {
            return this.document;
        }

        @java.lang.SuppressWarnings("all")
        // @lombok.Generated
        public String getRawDocument() {
            return this.rawDocument;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        // @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this)
                return true;
            if (!(o instanceof PrpUpdateEvent.Update))
                return false;
            final PrpUpdateEvent.Update other      = (PrpUpdateEvent.Update) o;
            final java.lang.Object      this$type  = this.getType();
            final java.lang.Object      other$type = other.getType();
            if (this$type == null ? other$type != null : !this$type.equals(other$type))
                return false;
            final java.lang.Object this$rawDocument  = this.getRawDocument();
            final java.lang.Object other$rawDocument = other.getRawDocument();
            if (this$rawDocument == null ? other$rawDocument != null : !this$rawDocument.equals(other$rawDocument))
                return false;
            return true;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        // @lombok.Generated
        public int hashCode() {
            final int              PRIME  = 59;
            int                    result = 1;
            final java.lang.Object $type  = this.getType();
            result = result * PRIME + ($type == null ? 43 : $type.hashCode());
            final java.lang.Object $rawDocument = this.getRawDocument();
            result = result * PRIME + ($rawDocument == null ? 43 : $rawDocument.hashCode());
            return result;
        }
    }

    public enum Type {
        PUBLISH, WITHDRAW, INCONSISTENT, CONSISTENT;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this)
            return true;
        if (!(o instanceof PrpUpdateEvent))
            return false;
        final PrpUpdateEvent other = (PrpUpdateEvent) o;
        if (!java.util.Arrays.deepEquals(this.getUpdates(), other.getUpdates()))
            return false;
        return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public int hashCode() {
        final int PRIME  = 59;
        int       result = 1;
        result = result * PRIME + java.util.Arrays.deepHashCode(this.getUpdates());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public java.lang.String toString() {
        return "PrpUpdateEvent(updates=" + java.util.Arrays.deepToString(this.getUpdates()) + ")";
    }
}
