// Generated by delombok at Tue Jan 02 01:24:37 CET 2024
/*
 * Copyright (C) 2017-2023 Dominic Heutelbeck (dominic@heutelbeck.com)
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sapl.prp;

import java.util.ArrayList;
import java.util.List;
import io.sapl.grammar.sapl.PolicyElement;
import io.sapl.grammar.sapl.SAPL;

public class PolicyRetrievalResult {
    List<SAPL> matchingDocuments = new ArrayList<>();
    boolean    errorsInTarget    = false;
    boolean    prpValidState     = true;

    public List<SAPL> getMatchingDocuments() {
        return new ArrayList<>(matchingDocuments);
    }

    public List<PolicyElement> getPolicyElements() {
        return matchingDocuments.stream().map(SAPL::getPolicyElement).toList();
    }

    public PolicyRetrievalResult withMatch(SAPL match) {
        var matches = new ArrayList<>(matchingDocuments);
        matches.add(match);
        return new PolicyRetrievalResult(matches, errorsInTarget, prpValidState);
    }

    public PolicyRetrievalResult withError() {
        return new PolicyRetrievalResult(new ArrayList<>(matchingDocuments), true, prpValidState);
    }

    public PolicyRetrievalResult withInvalidState() {
        return new PolicyRetrievalResult(new ArrayList<>(matchingDocuments), errorsInTarget, false);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public java.lang.String toString() {
        return "PolicyRetrievalResult(matchingDocuments=" + this.getMatchingDocuments() + ", errorsInTarget="
                + this.isErrorsInTarget() + ", prpValidState=" + this.isPrpValidState() + ")";
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this)
            return true;
        if (!(o instanceof PolicyRetrievalResult))
            return false;
        final PolicyRetrievalResult other = (PolicyRetrievalResult) o;
        if (!other.canEqual((java.lang.Object) this))
            return false;
        if (this.isErrorsInTarget() != other.isErrorsInTarget())
            return false;
        if (this.isPrpValidState() != other.isPrpValidState())
            return false;
        final java.lang.Object this$matchingDocuments  = this.getMatchingDocuments();
        final java.lang.Object other$matchingDocuments = other.getMatchingDocuments();
        if (this$matchingDocuments == null ? other$matchingDocuments != null
                : !this$matchingDocuments.equals(other$matchingDocuments))
            return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof PolicyRetrievalResult;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public int hashCode() {
        final int PRIME  = 59;
        int       result = 1;
        result = result * PRIME + (this.isErrorsInTarget() ? 79 : 97);
        result = result * PRIME + (this.isPrpValidState() ? 79 : 97);
        final java.lang.Object $matchingDocuments = this.getMatchingDocuments();
        result = result * PRIME + ($matchingDocuments == null ? 43 : $matchingDocuments.hashCode());
        return result;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public PolicyRetrievalResult() {
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public PolicyRetrievalResult(final List<SAPL> matchingDocuments, final boolean errorsInTarget,
            final boolean prpValidState) {
        this.matchingDocuments = matchingDocuments;
        this.errorsInTarget    = errorsInTarget;
        this.prpValidState     = prpValidState;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public boolean isErrorsInTarget() {
        return this.errorsInTarget;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public boolean isPrpValidState() {
        return this.prpValidState;
    }
}
