// Generated by delombok at Tue Jan 02 01:24:37 CET 2024
/*
 * Copyright (C) 2017-2023 Dominic Heutelbeck (dominic@heutelbeck.com)
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sapl.prp.index.canonical;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;
import com.google.common.collect.ImmutableList;
import io.sapl.grammar.sapl.SAPL;

public class CanonicalIndexDataContainer {
    private final Map<DisjunctiveFormula, Set<SAPL>>              formulaToDocuments;
    private final Map<ConjunctiveClause, Set<DisjunctiveFormula>> clauseToFormulas;
    private final ImmutableList<Predicate>                        predicateOrder;
    private final List<Set<DisjunctiveFormula>>                   relatedFormulas;
    private final Map<DisjunctiveFormula, Bitmask>                relatedCandidates;
    private final Map<Integer, Set<CTuple>>                       conjunctionsInFormulasReferencingConjunction;
    private final int[]                                           numberOfLiteralsInConjunction;
    private final int[]                                           numberOfFormulasWithConjunction;
    private final int                                             numberOfConjunctions;

    public CanonicalIndexDataContainer(Map<DisjunctiveFormula, Set<SAPL>> formulaToDocuments,
            Map<ConjunctiveClause, Set<DisjunctiveFormula>> clauseToFormulas, Collection<Predicate> predicateOrder,
            List<Set<DisjunctiveFormula>> relatedFormulas, Map<DisjunctiveFormula, Bitmask> relatedCandidates,
            Map<Integer, Set<CTuple>> conjunctionsInFormulasReferencingConjunction, int[] numberOfLiteralsInConjunction,
            int[] numberOfFormulasWithConjunction) {
        this(formulaToDocuments, clauseToFormulas, ImmutableList.copyOf(predicateOrder), relatedFormulas,
                relatedCandidates, conjunctionsInFormulasReferencingConjunction, numberOfLiteralsInConjunction,
                numberOfFormulasWithConjunction, numberOfLiteralsInConjunction.length);
    }

    public CanonicalIndexDataContainer(Map<DisjunctiveFormula, Set<SAPL>> formulaToDocuments,
            Map<ConjunctiveClause, Set<DisjunctiveFormula>> clauseToFormulas, ImmutableList<Predicate> predicateOrder,
            List<Set<DisjunctiveFormula>> relatedFormulas, Map<DisjunctiveFormula, Bitmask> relatedCandidates,
            Map<Integer, Set<CTuple>> conjunctionsInFormulasReferencingConjunction, int[] numberOfLiteralsInConjunction,
            int[] numberOfFormulasWithConjunction, int numberOfConjunctions) {
        this.formulaToDocuments                           = formulaToDocuments;
        this.clauseToFormulas                             = clauseToFormulas;
        this.predicateOrder                               = predicateOrder;
        this.relatedFormulas                              = relatedFormulas;
        this.relatedCandidates                            = relatedCandidates;
        this.conjunctionsInFormulasReferencingConjunction = conjunctionsInFormulasReferencingConjunction;
        this.numberOfLiteralsInConjunction                = numberOfLiteralsInConjunction.clone();
        this.numberOfFormulasWithConjunction              = numberOfFormulasWithConjunction.clone();
        this.numberOfConjunctions                         = numberOfConjunctions;
    }

    public int getNumberOfLiteralsInConjunction(int conjunctionIndex) {
        return numberOfLiteralsInConjunction[conjunctionIndex];
    }

    public int getNumberOfFormulasWithConjunction(int conjunctionIndex) {
        return numberOfFormulasWithConjunction[conjunctionIndex];
    }

    public Set<CTuple> getConjunctionsInFormulasReferencingConjunction(int conjunctionIndex) {
        return conjunctionsInFormulasReferencingConjunction.get(conjunctionIndex);
    }

    Set<DisjunctiveFormula> getRelatedFormulas(int conjunctionIndex) {
        return relatedFormulas.get(conjunctionIndex);
    }

    Set<SAPL> getPoliciesIncludingFormula(DisjunctiveFormula formula) {
        return formulaToDocuments.get(formula);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this)
            return true;
        if (!(o instanceof CanonicalIndexDataContainer))
            return false;
        final CanonicalIndexDataContainer other = (CanonicalIndexDataContainer) o;
        if (!other.canEqual((java.lang.Object) this))
            return false;
        if (this.getNumberOfConjunctions() != other.getNumberOfConjunctions())
            return false;
        final java.lang.Object this$formulaToDocuments  = this.formulaToDocuments;
        final java.lang.Object other$formulaToDocuments = other.formulaToDocuments;
        if (this$formulaToDocuments == null ? other$formulaToDocuments != null
                : !this$formulaToDocuments.equals(other$formulaToDocuments))
            return false;
        final java.lang.Object this$clauseToFormulas  = this.clauseToFormulas;
        final java.lang.Object other$clauseToFormulas = other.clauseToFormulas;
        if (this$clauseToFormulas == null ? other$clauseToFormulas != null
                : !this$clauseToFormulas.equals(other$clauseToFormulas))
            return false;
        final java.lang.Object this$predicateOrder  = this.getPredicateOrder();
        final java.lang.Object other$predicateOrder = other.getPredicateOrder();
        if (this$predicateOrder == null ? other$predicateOrder != null
                : !this$predicateOrder.equals(other$predicateOrder))
            return false;
        final java.lang.Object this$relatedFormulas  = this.relatedFormulas;
        final java.lang.Object other$relatedFormulas = other.relatedFormulas;
        if (this$relatedFormulas == null ? other$relatedFormulas != null
                : !this$relatedFormulas.equals(other$relatedFormulas))
            return false;
        final java.lang.Object this$relatedCandidates  = this.relatedCandidates;
        final java.lang.Object other$relatedCandidates = other.relatedCandidates;
        if (this$relatedCandidates == null ? other$relatedCandidates != null
                : !this$relatedCandidates.equals(other$relatedCandidates))
            return false;
        final java.lang.Object this$conjunctionsInFormulasReferencingConjunction  = this.conjunctionsInFormulasReferencingConjunction;
        final java.lang.Object other$conjunctionsInFormulasReferencingConjunction = other.conjunctionsInFormulasReferencingConjunction;
        if (this$conjunctionsInFormulasReferencingConjunction == null
                ? other$conjunctionsInFormulasReferencingConjunction != null
                : !this$conjunctionsInFormulasReferencingConjunction
                        .equals(other$conjunctionsInFormulasReferencingConjunction))
            return false;
        if (!java.util.Arrays.equals(this.numberOfLiteralsInConjunction, other.numberOfLiteralsInConjunction))
            return false;
        if (!java.util.Arrays.equals(this.numberOfFormulasWithConjunction, other.numberOfFormulasWithConjunction))
            return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof CanonicalIndexDataContainer;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public int hashCode() {
        final int PRIME  = 59;
        int       result = 1;
        result = result * PRIME + this.getNumberOfConjunctions();
        final java.lang.Object $formulaToDocuments = this.formulaToDocuments;
        result = result * PRIME + ($formulaToDocuments == null ? 43 : $formulaToDocuments.hashCode());
        final java.lang.Object $clauseToFormulas = this.clauseToFormulas;
        result = result * PRIME + ($clauseToFormulas == null ? 43 : $clauseToFormulas.hashCode());
        final java.lang.Object $predicateOrder = this.getPredicateOrder();
        result = result * PRIME + ($predicateOrder == null ? 43 : $predicateOrder.hashCode());
        final java.lang.Object $relatedFormulas = this.relatedFormulas;
        result = result * PRIME + ($relatedFormulas == null ? 43 : $relatedFormulas.hashCode());
        final java.lang.Object $relatedCandidates = this.relatedCandidates;
        result = result * PRIME + ($relatedCandidates == null ? 43 : $relatedCandidates.hashCode());
        final java.lang.Object $conjunctionsInFormulasReferencingConjunction = this.conjunctionsInFormulasReferencingConjunction;
        result = result * PRIME + ($conjunctionsInFormulasReferencingConjunction == null ? 43
                : $conjunctionsInFormulasReferencingConjunction.hashCode());
        result = result * PRIME + java.util.Arrays.hashCode(this.numberOfLiteralsInConjunction);
        result = result * PRIME + java.util.Arrays.hashCode(this.numberOfFormulasWithConjunction);
        return result;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public ImmutableList<Predicate> getPredicateOrder() {
        return this.predicateOrder;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public int getNumberOfConjunctions() {
        return this.numberOfConjunctions;
    }
}
