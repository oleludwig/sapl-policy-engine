// Generated by delombok at Tue Jan 02 01:24:37 CET 2024
/*
 * Copyright (C) 2017-2023 Dominic Heutelbeck (dominic@heutelbeck.com)
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sapl.prp.index.canonical;

/**
 * Tuple of a conjunction index number and the number of formulas in F(ci)
 * containing ci .
 */
public final class CTuple {
    private final int                                              // conjunction index number
    cI;
    private final long                                             // number of formulas containing conjunction
    n;

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public CTuple(final int cI, final long n) {
        this.cI = cI;
        this.n  = n;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public int getCI() {
        return this.cI;
    }

    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public long getN() {
        return this.n;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this)
            return true;
        if (!(o instanceof CTuple))
            return false;
        final CTuple other = (CTuple) o;
        if (this.getCI() != other.getCI())
            return false;
        if (this.getN() != other.getN())
            return false;
        return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public int hashCode() {
        final int PRIME  = 59;
        int       result = 1;
        result = result * PRIME + this.getCI();
        final long $n = this.getN();
        result = result * PRIME + (int) ($n >>> 32 ^ $n);
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    // @lombok.Generated
    public java.lang.String toString() {
        return "CTuple(cI=" + this.getCI() + ", n=" + this.getN() + ")";
    }
}
